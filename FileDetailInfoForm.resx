<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGdntShnZ7WxZ2e19Who
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2dntfVnZ7WvZ2e2KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABnZ7UoZ2e17Who
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9nZ7btZ2e2KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGdn
        tbFoaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9nZ7WvAAAAAAAAAAAAAAAAAAAAAAAA
        AABnZ7UGZ2e172hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2dntfMAAAAAAAAAAAAA
        AAAAAAAAAAAAAGhotQpoaLX1aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/wAA
        AAAAAAAAAAAAAAAAAAAAAAAAaGi1CmhotfVoaLb/aGi2/2hotv9oaLb/aGi2/2dntf1nZ7X9aGi2/2ho
        tv9nZ7X9aGi29WhotvVoaLb1aGi29WhotvVoaLb1aGi29WhotvVnZ7X9aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/AAAAAAAAAAAAAAAAAAAAAAAAAABoaLUKaGi19Whotv9oaLb/aGi2/2hotv9oaLb/Z2e2OGdn
        tTxnZ7X9aGi2/2dntjhoaLcKaGi3CmhotwpoaLcKaGi3CmhotwpoaLcKaGi3CmdntTxnZ7X9aGi2/2ho
        tv9oaLb/aGi2/2hotv8AAAAAAAAAAAAAAAAAAAAAAAAAAGhotQpoaLX1aGi2/2hotv9oaLb/aGi2/2ho
        tv9nZ7Y2Z2e1OGdntf1oaLb/Z2e2NgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ2e1OGdn
        tf1oaLb/aGi2/2hotv9oaLb/aGi2/wAAAAAAAAAAAAAAAAAAAAAAAAAAaGi1CmhotfVoaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/AAAAAAAAAAAAAAAAAAAAAAAAAABoaLUKaGi19Who
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv8AAAAAAAAAAAAAAAAAAAAAAAAAAGho
        tQpoaLX1aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/wAAAAAAAAAAAAAAAAAA
        AAAAAAAAaGi1CmhotfVoaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/AAAAAAAA
        AAAAAAAAAAAAAAAAAABoaLUKaGi19Whotv9oaLb/aGi2/2hotv9oaLb/Z2e1NmdntThnZ7X9aGi2/2dn
        tTYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGdntThnZ7X9aGi2/2hotv9oaLb/aGi2/2ho
        tv8AAAAAAAAAAAAAAAAAAAAAAAAAAGhotQpoaLX1aGi2/2hotv9oaLb/aGi2/2hotv9nZ7U4Z2e1PGdn
        tf1oaLb/Z2e1OGhotQpoaLUKaGi1CmhotQpoaLUKaGi1CmhotQpoaLUKZ2e1PGdntf1oaLb/aGi2/2ho
        tv9oaLb/aGi2/wAAAAAAAAAAAAAAAAAAAAAAAAAAaGi1CmhotfVoaLb/aGi2/2hotv9oaLb/aGi2/2dn
        tf1nZ7X9aGi2/2hotv9nZ7X9aGi19WhotfVoaLX1aGi19WhotfVoaLX1aGi19WhotfVnZ7X9aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/AAAAAAAAAAAAAAAAAAAAAAAAAABoaLUKaGi19Whotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv8AAAAAAAAAAAAAAAAAAAAAAAAAAGhotQpoaLX1aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/wAAAAAAAAAAAAAAAAAAAAAAAAAAaGi1Cmho
        tfVoaLb/aGi2/2hotv9oaLb/aGi2/2dntf1nZ7X9aGi2/2hotv9nZ7X9aGi29WhotvVoaLb1aGi29Who
        tvVoaLb1aGi29WhotvVnZ7X9aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/AAAAAAAAAAAAAAAAAAAAAAAA
        AABoaLUKaGi19Whotv9oaLb/aGi2/2hotv9oaLb/Z2e2OGdntTxnZ7X9aGi2/2dntjhoaLcKaGi3Cmho
        twpoaLcKaGi3CmhotwpoaLcKaGi3CmdntTxnZ7X9aGi2/2hotv9oaLb/aGi2/2hotv8AAAAAAAAAAAAA
        AAAAAAAAAAAAAGhotQpoaLX1aGi2/2hotv9oaLb/aGi2/2hotv9nZ7Y2Z2e1OGdntf1oaLb/Z2e2NgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ2e1OGdntf1oaLb/aGi2/2hotv9oaLb/aGi2/wAA
        AAAAAAAAAAAAAAAAAAAAAAAAaGi1CmhotfVoaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/AAAAAAAAAAAAAAAAAAAAAAAAAABoaLUKaGi19Whotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv8AAAAAAAAAAAAAAAAAAAAAAAAAAGdntQZnZ7XvaGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi19QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGdntbFoaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9nZ7WxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ2e1KGdn
        tu1oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/aGi2/2ho
        tv9oaLb/aGi2/2hotv9oaLb/aGi2/2hotv9oaLb/Z2e17WdntigAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAZ2e1KGdntrFnZ7bvaGi29WhotvVoaLb1aGi29WhotvVoaLb1aGi29WhotvVoaLb1aGi29Who
        tvVoaLb1aGi29WhotvVoaLb1aGi29WhotvVoaLb1aGi272dnta9nZ7UoAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGdntgZoaLcKaGi3CmhotwpoaLcKaGi3CmhotwpoaLcKaGi3Cmho
        twpoaLcKaGi3CmhotwpoaLcKaGi3CmhotwpoaLcKaGi3CmhotwpoaLcGAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////////AAAD/gAAAfwAAAD8AAAA/AAAAPwAAAD8DP
        /A/Az/wPwAAAD8AAAA/AAAAPwAAAD8DP/A/Az/wPwAAAD8AAAA/AAAAPwAAAD8DP/A/Az/wPwAAAD8AA
        AA/AAAAPwAAAD+AAAB/wAAA///////////8=
</value>
  </data>
</root>